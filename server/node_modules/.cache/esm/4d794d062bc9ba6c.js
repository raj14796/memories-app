let mongoose,PostMessage;_2bc‍.x([["getPosts",()=>getPosts],["createPost",()=>createPost],["updatePost",()=>updatePost],["deletePost",()=>deletePost],["likePost",()=>likePost]]);_2bc‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_2bc‍.w("../models/postMessage",[["default",["PostMessage"],function(v){PostMessage=v}]]);


       const getPosts = async (req, res) => {
    try {
        const postMessages = await PostMessage.find();
        _2bc‍.g.console.log(postMessages);
        return res.status(200).json(postMessages);
    } catch (error) {
        return res.status(404).json({ message: error.message });
    }
}

       const createPost = (async (req, res) => {
    const post = req.body;
    const newPost = new PostMessage(post);
    try {
        await newPost.save();
        return res.status(201).json(newPost);
    } catch (error) {
        return res.status(409).json({ message: error.message });
    }
})

       const updatePost = async (req, res) => {
    try {
        const { id: _id } = req.params;
        const post = req.body;

        if (!mongoose.Types.ObjectId.isValid(_id)) {
            return res.status(404).send("No post with that id");
        }
        const updatedPost = await PostMessage.findByIdAndUpdate(_id, { ...post, _id }, { new: true });
        res.json(updatedPost);
    } catch (error) {
        _2bc‍.g.console.log(error)
    }
}

       const deletePost = async (req, res) => {
    try {
        const { id: _id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(_id)) {
        return res.status(404).send("No post with that id");
    }
    const postCreator = await PostMessage.findOne({_id:_id});
    const deletePost = await PostMessage.findByIdAndRemove(_id);

    res.json({ message: `Post deleted successfully created by ${postCreator.creator}` });
    } catch (error) {
        _2bc‍.g.console.log(error);
    }
}

       const likePost = async (req, res) => {
    try {
        const { id: _id } = req.params;
        const post = req.body;

        if (!mongoose.Types.ObjectId.isValid(_id)) {
            return res.status(404).send("No post with that id");
        }
        const updatedPost = await PostMessage.findByIdAndUpdate(_id, { ...post, likeCount }, { new: true });
        res.json(updatedPost);
    } catch (error) {
        _2bc‍.g.console.log(error);
    }
}
